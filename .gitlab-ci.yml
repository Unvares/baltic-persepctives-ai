image: 'thlmylab/swakkd:stable'

stages:
  - prepare
  - build
  - deploy

variables:
  EMBEDDING_EP: "https://bge-m3-embedding.llm.mylab.th-luebeck.dev/"
  API_KEY: "$API_KEY"

secrets:
  stage: prepare
  script:
    - kubectl delete secret gitlab-registry-$CI_PROJECT_ID || true
    - >
      kubectl create secret docker-registry gitlab-registry-$CI_PROJECT_ID
      --docker-server=$CI_REGISTRY
      --docker-username=image-registry
      --docker-password=$CI_REGISTRY_TOKEN
  rules:
    - if: $CI_COMMIT_REF_SLUG == "main"

volumes:
  stage: prepare
  script:
    - cd deploy
    - kubectl apply -f demo-pvc.yaml
  rules:
    - if: $CI_COMMIT_REF_SLUG == "main"

chatbot-img:
  stage: build
  image: docker:24
  services: [ "docker:24-dind" ]
  rules:
    - changes:
        - chatbot/*
        - chatbot/*/**
    - when: manual
    - if: $CI_COMMIT_REF_SLUG == "main"
  script:
    - cd chatbot
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/chatbot:latest .
    - docker push $CI_REGISTRY_IMAGE/chatbot:latest

chatbot-rag-img:
  stage: build
  image: docker:24
  services: [ "docker:24-dind" ]
  rules:
    - changes:
        - chatbot-rag/*
        - chatbot-rag/*/**
    - when: manual
    - if: $CI_COMMIT_REF_SLUG == "main"
  script:
    - cd chatbot-rag
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg EMBEDDING_EP=$EMBEDDING_EP -t $CI_REGISTRY_IMAGE/chatbot-rag:latest .
    - docker push $CI_REGISTRY_IMAGE/chatbot-rag:latest

langserve-img:
  stage: build
  image: docker:24
  services: [ "docker:24-dind" ]
  rules:
    - changes:
        - backend/*
        - backend/*/**
    - when: manual
    - if: $CI_COMMIT_REF_SLUG == "main"
  script:
    - cd backend
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg API_KEY=$API_KEY -t $CI_REGISTRY_IMAGE/langserve:latest .
    - docker push $CI_REGISTRY_IMAGE/langserve:latest

frontend-img:
  stage: build
  image: docker:24
  services: [ "docker:24-dind" ]
  rules:
    - changes:
        - project/*
        - project/*/**
    - when: manual
  script:
    - cd project
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg EMBEDDING_EP=$EMBEDDING_EP -t $CI_REGISTRY_IMAGE/frontend:latest .
    - docker push $CI_REGISTRY_IMAGE/frontend:latest

chatbot:
  stage: deploy
  needs: [ "chatbot-img" ]
  script:
    - cd deploy
    - mo chatbot-dep+svc.yaml | kubectl delete -f - || true
    - mo chatbot-dep+svc.yaml | kubectl apply -f -
  rules:
    - if: $CI_COMMIT_REF_SLUG == "main"

chatbot-rag:
  stage: deploy
  needs: [ "chatbot-rag-img" ]
  script:
    - cd deploy
    - mo chatbot-rag-dep+svc.yaml | kubectl delete -f - || true
    - mo chatbot-rag-dep+svc.yaml | kubectl apply -f -
  rules:
    - if: $CI_COMMIT_REF_SLUG == "main"

langserve-rag:
  stage: deploy
  needs: [ "langserve-img" ]
  script:
    - cd deploy
    - mo langserve-dep+svc.yaml | kubectl delete -f - || true
    - mo langserve-dep+svc.yaml | kubectl apply -f -
  rules:
    - if: $CI_COMMIT_REF_SLUG == "main"

frontend:
  stage: deploy
  needs: [ "frontend-img" ]
  script:
    - cd deploy
    - mo frontend-dep+svc.yaml | kubectl delete -f - || true
    - mo frontend-dep+svc.yaml | kubectl apply -f -
  rules:
    - when: manual

ingress:
  stage: deploy
  script:
    - cd deploy
    - mo project-ing.yaml | kubectl apply -f -
  rules:
    - when: manual
